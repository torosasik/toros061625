{% liquid
  if cart.attributes.choose_option_id != blank
    assign choose_option_id = cart.attributes.choose_option_id
  endif
  assign section_id = section.id | append: choose_option_id

  assign unavailable_text = 'products.product.unavailable' | t 
  assign product_form_id = 'product-form-' | append: section_id

  assign rounded_corner_image = false
  if settings.edges_type == 'rounded_corners'
    assign rounded_corner_image = true
  endif 
  if settings.lang_direction contains request.locale.iso_code
    assign is_rtl = true
  else
    assign is_rtl = false
  endif
%}
{%- capture dataForCustomerEvent -%}
  {
    "product": {
      "id": {{ product.id | default: 0 }},
      "selected_variant_id": {{ product.selected_or_first_available_variant.id | default: 0 }},
      "has_only_default_variant": {{ product.has_only_default_variant }},
      "title": "{{ product.title | escape }}",
      "variant_title": "{{ product.selected_or_first_available_variant.title | escape }}",
      "sku": "{{ product.selected_or_first_available_variant.sku }}",
      "currencyCode": "{{ cart.currency.iso_code }}",
      "price": {{ product.selected_or_first_available_variant.price | default: 0 }},
      "vendor": "{{ product.vendor | escape }}",
      "category": "{{ collection.title | default: '' | escape }}"
    }
  }
{%- endcapture %}
<div id="choose-options-content">
  <div 
    id="x-product-template-{{ product.id }}-{{ section_id }}{% if is_rtl %} rtl{% endif %}"
    class="x-product-{{ section_id }} flex items-center w-full h-full border-solid border pt-7 pb-5 lg:pt-9 lg:pb-7{% if settings.edges_type == 'rounded_corners' %} md:rounded-[10px]{% unless section.settings.full_width_mobile %} rounded-[10px]{% endunless %}{% endif %}"
  >
    <div
      id="choose-options-content-{{ choose_option_id }}"
      class="content-center w-full h-full"
      {%- if product != blank -%}
        x-intersect.once='$store.xCustomerEvent.fire("product_viewed_custom", $el)'
        x-customer-event-data="{{ dataForCustomerEvent | escape }}"
      {%- endif -%}
    >
      <div class="w-full scrollbar-body max-h-full overflow-y-auto pr-4 lg:pr-7 pl-4 lg:pl-7{% if is_rtl %} rtl{% endif %}">
        <button @click="showOptions =! showOptions" class="top-1 right-2 lg:top-3 lg:right-5 rtl:right-auto rtl:lg:right-auto rtl:left-2 rtl:lg:left-5 z-20 absolute pl-2 pr-2 pb-2 pt-2">
          <span class="inline-block h-4 w-4">
            {% render 'icon-alls', icon: 'icon-close' %}
          </span>
        </button>
        <div id="ProductInfo-{{ section_id }}" class="w-full pb-1 lg:pl-0 md:pr-0 text-center{% unless is_rtl %} md:list-layout:text-left{% else %} md:list-layout:text-right{% endunless %}"> 
          <p href="{{ product.url }}" class="product-title mt-3 text-[110%] font-medium leading-tight p-break-words">{{ product.title | escape }}</p>
          {% comment %} price {% endcomment %}
          <div class="mt-4 mb-7 font-medium">
            <div id="price-{{ section_id }}" role="status">
              {%- render 'price',
                product: product,
                use_variant: true,
                container: 'main-product-price',
                price_class: "text-[110%]"
              -%}
            </div>
            <div class="shopify-payment-terms">
              {%- assign product_form_installment_id = 'product-form-installment-' | append: section_id -%}
              {%- form 'product', product, id: product_form_installment_id, class: 'installment caption-large' -%}
                <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                {{ form | payment_terms }}
              {%- endform -%}
            </div>
          </div> 
          {% comment %} variant option {% endcomment %}
          {%- unless product.has_only_default_variant -%}
            <div
              x-data="xVariantSelect('{{ section_id }}', false, '{{ unavailable_text }}', '{{ product.url }}', '{{ product.id }}', false, true)"
              data-url="{{ product.url }}"
            >
              <script type="application/json">
                {{ product.variants | json }}
              </script>
              <div
                id="variant-update-{{ section_id }}"
                class="variant-update-{{ section_id }} md:list-layout:flex md:list-layout:flex-wrap md:list-layout:gap-x-12"
              >
                  {%- for option in product.options_with_values -%}
                    {%- assign option_index = forloop.index | minus: 1 -%}
                      <fieldset
                        id="Option-{{ section_id }}-{{ forloop.index0 }}"
                        class="product-form__input pl-0 flex flex-wrap pb-4 quick-view:pb-2 eurus"
                        x-init="options[{{ forloop.index | minus: 1 }}] = document.querySelector('#Option-{{ section_id }}-{{ forloop.index0 }} input:checked').value"
                      >
                      <legend class="font-semibold p-break-words text-left rtl:text-right">{{ option.name }}{% if settings.products_color_swatches_enable_on_collection_page and settings.swatches_type == 'color' and settings.color_option_name contains option.name %}:
                      <span x-text=" options[{{ option_index }}]"></span>
                    {% endif %}
                      </legend>
                      {%- liquid
                        assign variants_available_arr = product.variants | map: 'available'
                        assign variants_option1_arr = product.variants | map: 'option1'
                        assign variants_option2_arr = product.variants | map: 'option2'
                        assign variants_option3_arr = product.variants | map: 'option3'
                      
                        assign color_option_values = settings.color_option_values | newline_to_br | strip_newlines | split: '<br />'
                        assign variant_key = 'option' | append: option.position
                      -%}
                      {%- for value in option.values -%}
                        {%- liquid
                          assign preview_image = blank
                          assign variant_value = product.variants | where: variant_key, value | first
                          if variant_value.featured_media.preview_image
                            assign preview_image = variant_value.featured_media.preview_image | image_url: width: 100, height: 100
                          elsif product.featured_media
                            assign preview_image = product.featured_media | image_url: width: 100, height: 100
                          endif
                          assign option_disabled = true
                      
                          for option1_name in variants_option1_arr
                            case option.position
                              when 1
                                if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                  assign option_disabled = false
                                endif
                              when 2
                                if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                  assign option_disabled = false
                                endif
                              when 3
                                if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                  assign option_disabled = false
                                endif
                            endcase
                          endfor
                        -%}
                        {%- liquid
                          assign color_custom = ''
                          assign swatch_image = false
                          assign color_value = ''
                          for color_option_value in color_option_values reversed
                            assign option_key = color_option_value | split: ':' | first
                            assign option_value = color_option_value | split: ':' | last | strip
                    
                            if option_key == value and option_value contains '.'
                              assign color_custom = option_key
                              assign swatch_image = true
                              assign color_value = option_value
                              break
                            endif
                            assign multiColors = option_value | remove_first: '#' | split: '#'
                            if option_key == value
                              assign color_custom = option_key
                              assign color_value = option_value
                              break
                            endif
                          endfor  
                        -%}
                        {% if preview_image and settings.replace_color_with_variant_images %}
                          {%- style %}
                           .color-watches.variant-{{ option.position }}-{{ forloop.index0 }}-{{ product.id }}:before {
                              background-image: url({{ preview_image }});
                            }
                          {%- endstyle %}
                        {% elsif color_custom != '' %}
                          {%- style %}
                            {% if swatch_image %}
                              [data-swatch="{{ color_custom }}"]:before {
                                background-image: url({{ color_value | file_img_url: "100x100" }});
                              }
                            {% elsif multiColors.size == 3 %}
                              [data-swatch="{{ color_custom }}"]:before {
                                background: linear-gradient(45deg, {{ '#' | append: multiColors[0] }}, {{ '#' | append: multiColors[0] }} 33.3%, {{ '#' | append: multiColors[1] }} 33.3%, {{ '#' | append: multiColors[1] }} 66.6%, {{ '#' | append: multiColors[2] }} 66.6%, {{ '#' | append: multiColors[2] }});
                              }
                            {% elsif multiColors.size == 2 %}
                              [data-swatch="{{ color_custom }}"]:before {
                                background: linear-gradient(45deg, {{ '#' | append: multiColors[0] }}, {{ '#' | append: multiColors[0] }} 50%, {{ '#' | append: multiColors[1] }} 50%, {{ '#' | append: multiColors[1] }});
                              }
                            {% else %}
                              [data-swatch="{{ color_custom }}"]:before {
                                background: {{ color_value }};
                              }
                            {% endif %}
                          {%- endstyle %}
                        {% endif %}
                        <input 
                          id="{{ section_id }}-{{ option.position }}-{{ forloop.index0 }}-{{ product.id }}"
                          setion-id="{{ section_id }}"
                          option-pos="{{ option.position }}"
                          forloop="{{ forloop.index0 }}"
                          type="radio"
                          name="{{ option.name }}"
                          value="{{ value | escape | replace: '&lt;', '\u003c' | replace: '&gt;', '\u003e' }}"
                          form="{{ product_form_id }}"
                          class="absolute opacity-0 h-0 w-0 input-radio{% if option_disabled %} disabled{% endif %}"
                          {% if option_index > 0 %}:class="{'disabled': !currentAvailableOptions[{{ option_index }}] || !currentAvailableOptions[{{ option_index }}].includes(`{{ value }}`)}"{% endif %}
                          x-model="options[{{ option_index }}]"
                          aria-label="{{ value | escape }}"
                          {% if option.selected_value == value %}checked{% endif %}
                        >
                        {%- liquid       
                          if settings.products_color_swatches_style == 'round'
                            assign rounded = 'rounded-full before:rounded-full'
                          elsif settings.edges_type == 'rounded_corners'
                            assign rounded = ' rounded-md overflow-hidden'
                          endif      
                        -%}
                    
                        {% if settings.products_color_swatches_enable_on_collection_page and settings.color_option_name contains option.name and settings.swatches_type == 'color' or settings.swatches_type == 'both_text_and_color' %}
                          <label 
                            class="mr-[5px] color-watches variant-{{ option.position }}-{{ forloop.index0 }}-{{ product.id }} cursor-pointer rtl:ml-[5px] rtl:mr-0.5 mt-2 mb-2.5 inline-flex ml-[2px] h-7 w-7 border relative {{ rounded }}" 
                            for="{{ section_id }}-{{ option.position }}-{{ forloop.index0 }}-{{ product.id }}"
                            data-swatch="{{ color_custom }}"
                            {% if preview_image == blank or settings.replace_color_with_variant_images == false and color_custom == '' %}
                              style="background: {{ value | split: ' ' | last | handle }};"
                            {% endif %}
                            tabindex="0"
                            aria-label="{{ value | escape }}"
                          >
                            <span class="h-full w-full color-watches-disable"></span>
                          </label>
                        {% else %}
                          <label class="flex items-center outline-none font-medium cursor-pointer mt-2 mr-1.5 rtl:ml-1.5 rtl:mr-0 pl-5 pr-5 pt-2 pb-2 border bg-[rgba(var(--background-color),1)]
                            {% if rounded_corner_image %} rounded-md{% endif %}" for="{{ section_id }}-{{ option.position }}-{{ forloop.index0 }}-{{ product.id }}"
                          >
                            <span class="p-break-words">{{ value | escape }}</span>
                          </label>
                        {% endif %}
                      {%- endfor -%}
                      </fieldset>
                  {%- endfor -%}
              </div>
            </div>
          {%- else -%}
            <div x-init="document.addEventListener('eurus:cart:items-changed', () => {
              Alpine.store('xUpdateVariantQuanity').updateQuantity('{{ section_id }}', '{{ product.url }}');
            });"></div>
          {%- endunless -%}
          <script src="{{ 'variant-select.js' | asset_url }}" defer></script>
          <div>
          {% comment %} buy-button {% endcomment %}
            <div x-ref='product_form_container' class="button-product mb-3"
              {% if settings.gift_wrapping_product != blank and settings.gift_wrapping_product.selected_or_first_available_variant %}
                x-data="xProductCart('{{ settings.gift_wrapping_product.selected_or_first_available_variant.id }}')"
              {% else %}
                x-data="xProductCart()"
              {% endif %}
            >
              <div>
                {%- form 'product', product, id: product_form_id, class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form', x-ref: 'product_form' -%}
                  <input type="hidden" id="update-variant-{{ section_id }}" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                  {% if settings.show_in_cart_items != 'none' %}
                    {% render 'estimate-shipping-cart', product: product, message: settings.message_estimate_cart %}
                  {% endif %}
                  <button
                    id="x-atc-button-{{ section_id }}"
                    role="button"
                    name="add"
                    type="submit"
                    @click="addToCart($event)"
                    class="relative add_to_cart_button button button-solid disabled:opacity-60 disabled:cursor-not-allowed duration-200 w-full pr-5 pl-5 md:list-layout:w-auto mb-2 pt-3 pb-3 md:pt-3.5 md:pb-3.5"
                    x-intersect.once.margin.200px="Alpine.store('xCartHelper').validateCart();"
                    {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}
                  >
                    <span class="x-atc-text" :class="loading && 'opacity-0 is-focus-button'">
                      {%- if product.selected_or_first_available_variant.available -%}
                        {% assign button_label = 'products.product.add_to_cart' | t %}
                        <span class="flex items-center justify-center">
                          {% render 'button-label', button_label: button_label, show_button_style: 'primary' %}
                        </span>
                      {%- else -%}
                        {% assign button_label = 'products.product.sold_out' | t %}
                        <span class="flex items-center justify-center">
                          {% render 'button-label', button_label: button_label, show_button_style: 'primary' %}
                        </span>
                      {%- endif -%}
                    </span>
                    <div class="inline-block w-5 h-5 animate-spin absolute top-[calc(50%-10px)] left-[calc(50%-10px)]" x-show="loading" x-cloak>
                      {% render 'icon-alls', icon: 'icon-loading' %}
                    </div>
                  </button>
                {%- endform -%}
                <div class="flex items-center mb-2 mt-2 pl-4 pr-4 pt-3 pb-3 bg-[rgba(var(--color-error),0.2)]{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %}" role="alert" x-cloak x-show="errorMessage" @click.away="errorMessage=false">
                  <div class="flex">
                    <span class="w-4 h-4">{% render 'icon-alls', icon: 'icon-error' %}</span>
                  </div>
                  <span class="ml-2 pt-0.5" x-ref="error_message"></span>
                </div>
              </div>
            </div>
            <script src="{{ 'product-cart.js' | asset_url }}" defer></script>
            <a href="{{ product.url }}" class="hover-text-link nav-link relative inline-block">
              {{ 'products.product.view_full_details' | t }}
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{%- comment -%}
  This file has been modified by the Yoast SEO for Shopify app.
  You can learn more about this (and learn how to cleanly revert these changes) at https://yoa.st/removing-theme-changes.
{%- endcomment -%}
{% comment %}
  Renders product detail

  Accepts:
  - product: {Object} Product Liquid object (optional)
  - is_product_page: {Boolean} is main-product section. Default: false (optional)
  - lazy_load: {Boolean} Image should be lazy loaded. Default: true (optional)
  - enable_sticky_image: {Boolean} Sticky content when scroll down. Default: true (optional)
  - full_width: {Boolean} Visible full width
  - media_layout: {String} Product media layout type. Values are 'thumbnail_slider', 'stacked', '2_columns'
  - show_thumbnail_desktop: {Boolean} Show thumnail on desktop
  - show_thumbnail_mobile: {Boolean} Show thumnail on mobile
  - show_arrow_button: {Boolean} Show next/previous slider on desktop
  - mobile_media_full: {Boolean} Is media visible full with in mobile
  - featured_product: {Boolean} Is Featured product
  - quick-view: {Boolean} is Quick view
  Usage:
  {% render 'product-template', lazy_load: false %}
{% endcomment %}

{%- liquid

  assign btn_addtocart = false
  assign blocktype = section.blocks | map: 'type' | uniq
  if blocktype contains 'buy_buttons'
    assign btn_addtocart = true
  endif

  assign unavailable_text = 'products.product.unavailable' | t
  assign product_form_id = 'product-form-' | append: section.id

  assign rounded_corner_image = false
  if settings.edges_type == 'rounded_corners'
    assign rounded_corner_image = true
  endif
  assign customize_picker_required = false
  assign type_file_upload = false
  for block in section.blocks
    if block.type == 'buy_buttons'
      if block.settings.preorder_show == 'yes' or block.settings.preorder_show == 'on_backordered' and product.selected_or_first_available_variant.inventory_policy == 'continue' and product.selected_or_first_available_variant.inventory_quantity < 1 and product.selected_or_first_available_variant.inventory_management != null
        assign can_show_preorder = true
      endif
    endif
    if block.type == 'sticky_add_to_cart'
      assign sticky_atc = true
    endif
    if block.type == 'customize_picker'
      if block.settings.required
        case block.settings.picker_type
          when 'single_text'
            assign customize_picker_required = true
          when 'multi_text'
            assign customize_picker_required = true
          when 'date'
            assign customize_picker_required = true
          when 'time'
            assign customize_picker_required = true
          when 'file_upload'
            assign customize_picker_required = true
            assign type_file_upload = true
        endcase
      endif
      if block.settings.picker_type == 'checkbox' and block.settings.minimum_select_value > 0
        assign customize_picker_required = true
      endif
    endif
  endfor

  if settings.lang_direction contains request.locale.iso_code
    assign class_rtl = 'rtl'
  else
    assign class_rtl = 'ltr'
  endif

  if section.settings.make_content_center
    assign show_content_center = true
  else
    assign show_content_center = false
  endif

  assign show_media_with_variant_selected = false
  if section.settings.option_to_classify_variant_media != blank and section.settings.show_media_with_variant_selected and product.has_only_default_variant == false
    for option in product.options_with_values
      if section.settings.option_to_classify_variant_media contains option.name and show_media_with_variant_selected == false
        assign media_with_option = option.name
        assign show_media_with_variant_selected = true
      endif
    endfor
  endif
-%}
{%- capture dataForCustomerEvent -%}
  {
    "product": {
      "id": {{ product.id | default: 0 }},
      "selected_variant_id": {{ product.selected_or_first_available_variant.id | default: 0 }},
      "has_only_default_variant": {{ product.has_only_default_variant }},
      "title": "{{ product.title | escape }}",
      "variant_title": "{{ product.selected_or_first_available_variant.title | escape }}",
      "sku": "{{ product.selected_or_first_available_variant.sku }}",
      "currencyCode": "{{ cart.currency.iso_code }}",
      "price": {{ product.selected_or_first_available_variant.price | default: 0 }},
      "vendor": "{{ product.vendor | escape }}",
      "category": "{{ collection.title | default: '' | escape }}"
    }
  }
{%- endcapture %}

{% render 'section-divider' %}
{% assign price_squared = product.price | divided_by: box_area | round: 2 %}
{% assign price_squared = price_squared | money %}
{% assign box_area = product.metafields.my_fields.box_area %}
{% assign box_area_clean = box_area | remove: " sq. ft." %}
{% assign tiles_per_box = product.metafields.my_fields.tiles_per_box %}
{% assign tile_size = box_area_clean | times: 1.0 | divided_by: tiles_per_box | round: 4 %}
        
  {% if product.variants.first.inventory_quantity > 0 and product.variants.first.inventory_management == 'shopify' %}
    {% assign max_qty = product.variants.first.inventory_quantity %}
    <script>
      console.log('available: {{ max_qty }}');
    </script>
  {% else %}
    {% assign max_qty = 10000 %}
    <script>
      console.log('available: {{ max_qty }}');
    </script>
  {% endif %}
        
<div
  id="x-product-template-{{ product.id }}-{{ section.id }}"
  class="x-product-{{ section.id }} w-full relative{% unless full_width and product != blank %} content-{{ section.id }}{% endunless %}"
  x-data="{ showStickyATC: false }"
  {% if product != blank %}
    x-intersect.once='$store.xProductRecently.setProduct("{{ product.id }}")'
  {% endif %}
>
  <div
    class="ltr flex relative flex-wrap{% if mobile_media_full %} full-width-mobile{% endif %}{% unless full_width or full_width_main_page %} page-width{% else %}{% unless featured_product %} full-width{% endunless %}{% endunless %}{% if section.settings.desktop_layout == "right" %} flex-row-reverse{% endif %} pb-[{{ section.settings.padding_bottom_mobile }}px] pt-[{{ section.settings.padding_top_mobile }}px] md:pb-[{{ section.settings.padding_bottom }}px] md:pt-[{{ section.settings.padding_top }}px]"
    {%- if product != blank -%}
      x-intersect.once='$store.xCustomerEvent.fire("product_viewed_custom", $el)'
      x-customer-event-data="{{ dataForCustomerEvent | escape }}"
    {%- endif -%}
  >
    {%- if product != blank -%}
      <div class="w-full relative quick-view:md:pb-0 quick-view:md:w-[45%] md:w-1/2 pb-7 md:pb-0{% if full_width %}{% unless mobile_media_full %} pr-5 pl-5{% endunless %} md:pl-12 md:pr-12 lg:pl-[84px] lg:pr-[84px]{% else %}{% if section.settings.desktop_layout == "right" %}{% if spacing_col == 'small' %} product-page:md:pl-5 product-page:lg:pl-8{% endif %} quick-view:md:pl-6 quick-view:md:pr-0{% else %}{% if spacing_col == 'small' %} product-page:md:pr-5 product-page:lg:pr-8{% endif %} quick-view:md:pr-6 quick-view:md:pl-0{% endif %}{% endif %}">
        {% assign media_with_option_handle = media_with_option | handle %}
        {%- render 'product-media-gallery',
          product: product,
          enable_sticky_image: enable_sticky_image,
          media_layout: media_layout,
          show_thumbnail_desktop: show_thumbnail_desktop,
          show_arrow_button: show_arrow_button,
          show_thumbnail_mobile: show_thumbnail_mobile,
          quick_view: quick_view,
          lazy_load: lazy_load,
          rounded_corner_image: rounded_corner_image,
          mobile_media_full: mobile_media_full,
          show_media_with_variant_selected: show_media_with_variant_selected,
          media_with_option: media_with_option_handle,
          show_first_image_avaiable: show_first_image_avaiable
        -%}
      </div>
      <div
        class="w-full relative quick-view:md:w-[55%] md:w-1/2{% if mobile_media_full %} pr-5 pl-5{% endif %}{% if full_width %} pl-5 pr-5 md:pr-0 md:pl-0{% else %} md:pl-0 md:pr-0{% endif %}{% if section.settings.desktop_layout == "right" %} flex product-page:md:justify-end{% endif %}{% if featured_product and full_width %} content-{{ section.id }} pt-8 pb-12 {{ class_padding_light }} {{ class_padding_dark }}{% else %} pt-3 md:pt-0 pb-0{% endif %}"
        {%- if section.settings.desktop_layout == 'right' -%}
          tabindex="0"
        {%- endif -%}
      >
        {%- if featured_product and full_width -%}
          <div
            class="content-{{ section.id }} hidden md:block absolute -z-10 top-0 bottom-0{% if section.settings.desktop_layout == "left" %} right-0{% else %} left-0{% endif %}"
          ></div>
        {%- endif -%}
        <div
          id="ProductInfo-{{ section.id }}"
          class="parent-element {% if settings.lang_direction contains request.locale.iso_code %}rtl {% endif %} product-info w-full pb-1{% if enable_sticky_image %} sticky top-20{% endif %}{% if section.settings.desktop_layout == "left" %} lg:pl-0 md:pr-5 2xl:pr-0 quick-view:md:pl-6 {% if spacing_col == 'small' %} product-page:md:pl-5 product-page:lg:pl-8{% else %} product-page:md:pl-12 product-page:lg:pl-[84px]{% endif %}{% if full_width %} lg:pr-5{% endif %}{% else %} lg:pr-0 md:pl-5 2xl:pl-0 quick-view:md:pr-6{% if spacing_col == 'small' %} product-page:md:pr-5 product-page:lg:pr-8{% else %} product-page:md:pr-12 product-page:lg:pr-[84px]{% endif %}{% if full_width %} lg:pl-5{% endif %}{% endif %} max-w-[{{ settings.page_width | divided_by: 2 | plus: 20 }}px]"
        >
          <div class="flex gap-x-2.5 flex-wrap">
            {%- if section.settings.show_vendor -%}
              <p class="{% if show_content_center %}text-center{% endif %} w-full mb-1 italic p-break-words">
                {{ product.vendor | escape }}
              </p>
            {%- endif -%}
            {%- if product.title != blank and section.settings.show_product_name -%}
              <{{ section.settings.heading_tag }} class="w-full {% if show_content_center %}text-center{% endif %} product-title h2 mb-3 leading-tight title-size--{{ section.id }}">
                {{- product.title | escape -}}
              </{{ section.settings.heading_tag }}>
            {%- endif -%}
            {%- for block in section.blocks -%}
              {%- case block.type -%}
                {%- when '@app' -%}
                  {% render block %}

                {% when 'calculator' %}
                  <style>
                    .product-grid-item,
                    .product-meta--review {
                      .spr-badge[data-rating="0.0"] {
                        display: none;
                      }
                    }

                    .calculator_wrapper {
                      display: flex;
                      flex-direction: row;
                      justify-content: flex-start;
                      margin-bottom: 10px;
                    }

                    .input_boxes {
                      text-align: center;
                      border: 1px solid #f5f5f5;
                      width: 100%;
                      max-width: 148px;
                    }

                    .input_boxes input {
                        margin-bottom: 0;
                        border: none;
                        text-align: center;
                        padding: 0px!important;
                        padding-top: 5px!important;
                    }

                    .calculator_container {
                      margin-bottom: 20px;
                      width:100%;
                    }

                    .open_calc_pop_up {
                      font-size: 12px;
                      font-weight: 600;
                      cursor: pointer;
                    }

                    .container_titles {
                        font-weight: 600;
                    }

                    .js-qty{
                      margin-bottom: 0;
                    }

                    .calc_pop_up {
                      position: fixed;
                      top: 0;
                      left: 0;
                      width: 100%;
                      background: #0000004a;
                      height: 100%;
                      display: none;
                      flex-direction: row;
                      align-items: center;
                      backdrop-filter: blur(10px);
                      justify-content: center;
                      transition: 0.4s;
                      z-index: 999;
                    }

                    .tile-calculator-wrapper {
                      background: #fff;
                      padding: 20px;
                      border: 1px solid #163155;
                      position: relative;
                      overflow-y: scroll;
                      max-height: 85%;
                      margin: 10px;
                    }

                    .close_calc_pop_up {
                      position: absolute;
                      right: 0;
                      top: 0;
                      padding: 12px;
                      font-weight: bold;
                      cursor: pointer;
                    }

                    .calc_pop_up-open {
                      display: flex;
                    }

                    .input-box {
                      text-align: center;
                      width: 100px;
                      border: 1px solid #656565;
                      margin-bottom: 10px;
                    }

                    .input-box input {
                      text-align: center;
                      border: none;
                      margin-bottom: 0px;
                    }

                    .line-separator {
                      text-align: center;
                      margin: 0px 0 30px;
                      border-bottom: 1px solid;
                    }

                    span.separator {
                      background: #fff;
                      padding: 10px;
                      position: relative;
                      top: 11px;
                      text-transform: uppercase;
                    }

                    .flex-box {
                      display: flex;
                      justify-content: space-evenly;
                      align-items: center;
                      position: relative;
                    }
                    .btn-calculator {
                      width: 100%;
                      background: #143055;
                      border: none;
                      padding: 10px;
                      margin: 20px 0;
                      color: #fff;
                      font-weight: 600;
                    }

                    .flex-box .input-box,
                    .flex-box .label {
                      width: 30%;
                    }

                    .tile-measuremts {
                      display: block;
                      font-size: 10px;
                      margin-top: 10px;
                      margin-bottom: 10px;
                    }

                    .tile-measuremts p {
                      margin: 0;
                    }

                    .box-half {
                      width: 49%!important;
                    }

                    .full-half {
                      width: 100%!important;
                    }

                    label.quantity-selector {
                      display: none!important;
                    }

                    .input_boxes .js-qty {
                      max-width: 100%;
                    }

                    .input_boxes .js--add,
                    .input_boxes .js--minus{
                      border: none!important;
                    }

                    .box_price {
                      font-size: 34px;
                      font-weight: 900;
                      color: #000;
                    }

                    .square_price {
                      font-weight: 900;
                      font-size: 18px;
                    }

                    .box_area{
                      font-size: 12px;
                      margin-left: 6px;
                      font-weight: 100;
                      color: #5c5c5c;
                    }

                    .smaller_text {
                      font-size: 13px;
                      font-weight: 100;
                    }

                    .calc_prices li {
                      margin: 0;
                    }

                    #overage {
                      width: 100%;
                      max-width: 100%!important;
                    }

                    .heading {
                      font-weight: 900;
                      font-size: 24px;
                      color: #143055 ;
                    }

                    .calculator-section h4,
                    .section-intro h4 {
                      color: #143055;
                    }

                    .small_text {
                      display: block;
                      font-size: 12px;
                      margin-bottom: 20px;
                    }

                    #overage {
                      margin-bottom: 5px;
                    }

                    .product-item--price .h1 {
                      display: flex;
                      margin-bottom: 15px;
                      flex-direction: row;
                      flex-wrap: wrap;
                    }

                    .product_page_total {
                      margin-top: 5px;
                      display: block;
                    }

                    .container_titles {
                      color: #143055;
                    }

                    #total_square {
                     margin-left: 5px;
                    }

                    .calculate_btn {
                      width: 50%;
                      margin: 0 auto;
                      display: block;
                      text-align: center;
                      margin-top: 10px;
                      background: #143055;
                      color: #fff;
                      padding: 5px;
                      font-weight: 700;
                      cursor: pointer;
                    }

                    #calculator-footage-section,
                    #calculator-dimensions-section{
                      transition: 0.4s;
                    }

                    .opacity_low {
                      opacity: .5;
                    }

                    .tile-calculator-wrapper{
                      scroll-behavior: smooth;
                    }
                    {% if product.tags contains 'overage-v3' == false %}
                    .calculator_wrapper .input_boxes input{
                      width:100%;
                    }
                    {% endif %}
                    .calculator_wrapper .input_boxes input {
                      width: 100%;
                      padding: 10px;
                    }
                    .calculator_wrapper .input_boxes {
                      text-align: center;
                      border: 1px solid #f5f5f5;
                      width: 100%;
                      max-width: 148px;
                      padding: 1px;
                      margin-top: 10px;
                    }
                    #overage-selectors, 
                    #bottom-overage-selectors {
                        display: flex;
                        flex-wrap: wrap;
                        column-gap: 2rem;
                        row-gap: .5rem;
                        margin: .5rem 0;
                    }
                    #manualInputField,
                    #manualInputFieldBottom {
                        border: 1px solid #CCC;
                        padding: 4px;
                        width: 100px;
                        margin: 0 auto .5rem auto;
                    }
                  </style>
                  {% if product.tags contains 'Tile_calculator' and product.tags contains 'overage-v3' == false and product.tags contains 'overage-popup-v3' == false %}
                    <div class="calculator_container">
                      <span class="calc_title">Quantity <a class="open_calc_pop_up">How much do I need?</a></span>
                      <div class="calculator_wrapper">
                        <div id="squared_size_wrapper" class="squared_size input_boxes">
                          <input type="text" class="squared_size" id="squared_size" placeholder="0" value="{{ box_area_clean }}">
                          <label class="container_titles">SQ. FT</label>
                        </div>
                        <div class="number_boxes input_boxes">
                          <label style="display: none;" for="quantity_look_alike" class="quantity-selector-fake"
                            >Quantity</label
                          >
                          <input
                            style="display:inline-block;"
                            type="text"
                            id="quantity_look_alike"
                            value="1"
                            min="1"
                            class="quantity-selector-fake"
                          >
                          <label style="display:none;" class="quantity-indicator-fake">
                            {% if product.metafields.sheetsqft.sheet_sqft_info != blank %}
                              {{ product.metafields.sheetsqft.sheet_sqft_info }}
                              <style>
                                .js-qty {
                                  display: inline-block;
                                }
                                .quantity-selector, .quantity-indicator {
                                  font-size: 15px;
                                  padding: 0 12px 0 4px;
                                }
                                .calculator_container {
                                  margin-bottom: 20px;
                                  width: 100%;
                                }
                              </style>
                            {% endif %}
                          </label>
                          <label class="container_titles box-label">
                            {% if product.metafields.measuringunitsatd.measuring_units_atd == "Box" %}
                              {{ product.metafields.measuringunitsatd.measuring_units_atd }}es
                            {% elsif product.metafields.measuringunitsatd.measuring_units_atd == "Sheet" %}
                              {{ product.metafields.measuringunitsatd.measuring_units_atd }}s
                            {% elsif product.metafields.measuringunitsatd.measuring_units_atd == "Piece" %}
                              {{ product.metafields.measuringunitsatd.measuring_units_atd }}s
                            {% else %}
                              {{ product.metafields.measuringunitsatd.measuring_units_atd }}
                            {% endif %}
                          </label>
                        </div>
                        <div style="display: none;" class="number_boxes input_boxes">
                          <label style="display: none;" for="quantity" class="quantity-selector">Quantity</label>
                          <input
                            style="display:inline-block;"
                            type="number"
                            id="quantity"
                            name="quantity"
                            value="1"
                            min="1"
                            class="quantity-selector"
                          >
                          <label style="display:none;" class="quantity-indicator">
                            {% if product.metafields.sheetsqft.sheet_sqft_info != blank %}
                              {{ product.metafields.sheetsqft.sheet_sqft_info }}
                              <style>
                                .js-qty {
                                  display: inline-block;
                                }
                                .quantity-selector, .quantity-indicator {
                                  font-size: 15px;
                                  padding: 0 12px 0 4px;
                                }
                              </style>
                            {% endif %}
                          </label>
                          <label class="container_titles box-label">{{ product.metafields.custom.measuring_units_atd }}</label>
                        </div>
                        <div id="squared_size_wrapper" class="squared_size input_boxes">
                          <span id="product_page_total" class="squared_size product_page_total"
                            >${{ product.price | divided_by: 100.00 }}
                          </span>
                          <label class="container_titles">Total Price</label>
                        </div>
                      </div>
                    </div>
                  {% endif %}
                  {% if product.tags contains 'overage-popup-v2' and product.tags contains 'overage-v3' == false and product.tags contains 'overage-popup-v3' == false %}
                    <div class="tile-calculator-wrapper calc_pop_up">
                      <div id="tile-calculator" class="productInfo-content">
                        <div class="close_calc_pop_up">Close</div>
                        <div class="calculator-section footage active" id="calculator-footage-section">
                          <div class="section-intro">
                            <h4>IF YOU KNOW THE SIZE OF AREA YOU WANT TO COVER</h4>
                            <p>Calculate the number of tiles I need to order:</p>
                          </div>
                          <div class="input-wrapper">
                            <div class="input-box" novalidate="novalidate">
                              <input
                                type="text"
                                name="calculator_footage"
                                id="calculator-footage"
                                class="required-entry validate-digits"
                                placeholder="0"
                              >
                              <span class="input-label">Sq. Ft.</span>
                            </div>
                          </div>
                          <h4>Get a little extra</h4>
                          
                          <div id="overage_top">
                            <div id="overage-selectors">
                            <label>
                              <input type="radio" name="properties[TOP-OVERAGE]" value="0.10" checked> 10%
                            </label>
                            <label>
                              <input type="radio" name="properties[TOP-OVERAGE]" value="0.15"> 15%
                            </label>
                            <label>
                              <input type="radio" name="properties[TOP-OVERAGE]" value="manual" id="manualInputRadio"> Manual Input
                            </label>
                            <label>
                              <input type="radio" name="properties[TOP-OVERAGE]" value="no_overage"> No Overage
                            </label>
                            </div>
                            <div id="top-manual-ovg" style="display: none;">
                              <input type="number" id="manualInputField" name="properties[OVERAGE_MANUAL]" placeholder="Enter %" step="1" min="0"> %
                            </div>
                          </div>
                          <script>
                            document.querySelectorAll('#overage_top input[name="properties[TOP-OVERAGE]"]').forEach(radio => {
                              radio.addEventListener('change', function () {
                                const manualInputField = document.querySelector('#overage_top #top-manual-ovg');
                                if (this.value === 'manual') {
                                  manualInputField.style.display = 'inline-block';
                                  manualInputField.focus();
                                } else {
                                  manualInputField.style.display = 'none';
                                }
                              });
                            });
                          </script>
                          
                          <span class="small_text"
                            >10% is the recommended minimum to cover cuts and future repairs</span
                          >
                          <a href="#bottom_pop_up" class="calculate_btn" id="calculate_top">Calculate</a>
                        </div>
                        <div class="calculator-section line-separator">
                          <span class="separator">Or</span>
                        </div>
                        <div class="calculator-section dimensions active" id="calculator-dimensions-section">
                          <div class="section-intro">
                            <h4>IF YOU KNOW THE SIZE OF AREA YOU WANT TO COVER</h4>
                            <p>Calculate the number of tiles I need to order:</p>
                          </div>
                          <div class="dimension-box length-value">
                            <div class="flex-box">
                              <label class="label">Length</label>
                              <div class="input-box ft" novalidate="novalidate">
                                <input
                                  type="text"
                                  placeholder="0"
                                  name="calculator_length_ft"
                                  id="calculator-length-ft"
                                  class="if-disable validate-number"
                                >
                                <span class="input-label">Feet</span>
                              </div>
                              <div class="input-box in" novalidate="novalidate">
                                <input
                                  type="text"
                                  placeholder="0"
                                  name="calculator_length_in"
                                  id="calculator-length-in"
                                  class="if-disable validate-number"
                                >
                                <span class="input-label">Inches</span>
                              </div>
                            </div>
                          </div>
                          <div class="dimension-box width-value">
                            <div class="flex-box">
                              <label class="label">Width</label>
                              <div class="input-box ft" novalidate="novalidate">
                                <input
                                  type="text"
                                  placeholder="0"
                                  name="calculator_width_ft"
                                  id="calculator-width-ft"
                                  class="if-disable validate-number"
                                >
                                <span class="input-label">Feet</span>
                              </div>
                              <div class="input-box in" novalidate="novalidate">
                                <input
                                  type="text"
                                  placeholder="0"
                                  name="calculator_width_in"
                                  id="calculator-width-in"
                                  class="if-disable validate-number"
                                >
                                <span class="input-label">Inches</span>
                              </div>
                            </div>
                          </div>
                          <h4>Get a little extra</h4>
                          <div id="overage_bottom">
                            <div id="bottom-overage-selectors">
                            <label>
                              <input type="radio" name="properties[BTM-OVERAGE]" value="0.10" checked> 10%
                            </label>
                            <label>
                              <input type="radio" name="properties[BTM-OVERAGE]" value="0.15"> 15%
                            </label>
                            <label>
                              <input type="radio" name="properties[BTM-OVERAGE]" value="manual" id="bottom-manualInputRadio"> Manual Input
                            </label>
                            <label>
                              <input type="radio" name="properties[BTM-OVERAGE]" value="no_overage"> No Overage
                            </label>
                            </div>
                            <div id="bottom-manual-ovg" style="display: none;">
                              <input type="number" id="manualInputFieldBottom" name="properties[OVERAGE_MANUAL]" placeholder="Enter %" step="1" min="0"> %
                            </div>
                          </div>
                          <script>
                            document.querySelectorAll('#overage_bottom input[name="properties[BTM-OVERAGE]"]').forEach(radio => {
                              radio.addEventListener('change', function () {
                                const manualInputFieldBottom = document.querySelector('#overage_bottom #bottom-manual-ovg');
                                if (this.value === 'manual') {
                                  manualInputFieldBottom.style.display = 'inline-block';
                                  manualInputFieldBottom.focus();
                                } else {
                                  manualInputFieldBottom.style.display = 'none';
                                }
                              });
                            });
                          </script>


                          
                          <span class="small_text"
                            >10% is the recommended minimum to cover cuts and future repairs</span
                          >
                          <a href="#bottom_pop_up" class="calculate_btn" id="calculate_bottom">Calculate</a>
                        </div>
                        <div class="footer_outcome">
                          <div class="calculator-section line-separator">
                            <span class="separator">Outcome</span>
                          </div>
                          <div class="flex-box">
                            <div class="input-box box-half" novalidate="novalidate">
                              <input
                                type="text"
                                class="solution_input form-control"
                                disabled="disabled"
                                id="solution"
                                placeholder="0"
                              >
                              <span class="input-label">Sq. Ft.</span>
                            </div>
                            <div class="input-box box-half" novalidate="novalidate">
                              <input
                                type="text"
                                class="solution_input form-control"
                                disabled="disabled"
                                id="total_coverage"
                                placeholder="0"
                              >
                              <span class="input-label">Total Coverage Sq. Ft.</span>
                            </div>
                          </div>
                          <div class="flex-box">
                            <div class="input-box box-half" novalidate="novalidate">
                              <input
                                type="text"
                                class="solution_input form-control"
                                disabled="disabled"
                                id="boxes"
                                placeholder="0"
                              >
                              <span class="input-label">
                                {% if product.metafields.measuringunitsatd.measuring_units_atd == "Box" %}
                                  {{ product.metafields.measuringunitsatd.measuring_units_atd }}es
                                {% elsif product.metafields.measuringunitsatd.measuring_units_atd == "Sheet" %}
                                  {{ product.metafields.measuringunitsatd.measuring_units_atd }}s
                                {% elsif product.metafields.measuringunitsatd.measuring_units_atd == "Piece" %}
                                  {{ product.metafields.measuringunitsatd.measuring_units_atd }}s
                                {% else %}
                                  {{ product.metafields.measuringunitsatd.measuring_units_atd }}
                                {% endif %}
                              </span>
                            </div>
                            <div class="input-box box-half" novalidate="novalidate">
                              <input
                                type="text"
                                class="solution_input form-control"
                                disabled="disabled"
                                id="total_cost"
                                placeholder="0"
                              >
                              <span class="input-label">Total Cost</span>
                            </div>
                          </div>
                        </div>

                        <div class="calculator-section actions">
                          <button id="addToquanitity" class="btn-calculator">
                            <span id="addToCartquanitity">Add To Cart</span>
                          </button>
                        </div>
                      </div>
                      <div id="bottom_pop_up"></div>
                    </div>
                  </div>
                {% endif %}

                {% if product.tags contains "overage-v3" or product.tags contains "overage-popup-v3" %}
                  <div class="inline-overage-calculator" data-product-id="{{ product.id }}">
                    
                    <!-- Quantity / Area Inputs -->
                    <div class="calculator_wrapper">
                      <div class="input_boxes">
                        <input type="text" class="squared_size" id="squared_size" placeholder="0" value="{{ box_area_clean | default: '0' }}">
                        <label class="container_titles">SQ. FT</label>
                      </div>
                      <div class="input_boxes">
                        <input type="text" id="quantity_look_alike" value="1" min="1" class="quantity-selector-fake">
                        <label class="container_titles box-label">Boxes</label>
                      </div>
                    </div>
                    
                    <!-- Overage Section -->
                    <div class="ovg-content" style="padding: 12px 0 0;">
                      <div class="ovg-overage-section">
                        <h4 style="font-size: 16px; font-weight: bold; text-align: left; margin-bottom: 12px; margin-top: 20px;">Overage Amount</h4>
                        <div id="ovg-overage">
                          <div id="ovg-overage-selectors">
                            <label>
                              <input type="radio" name="properties[OVERAGE]" value="0.10" checked>
                              <span>10%</span>
                            </label>
                            <label>
                              <input type="radio" name="properties[OVERAGE]" value="0.15">
                              <span>15%</span>
                            </label>
                            <label>
                              <input type="radio" name="properties[OVERAGE]" value="manual" id="ovg-manualInputRadio">
                              <span>Manual Input</span>
                            </label>
                            <label>
                              <input type="radio" name="properties[OVERAGE]" value="no_overage">
                              <span>No Overage</span>
                            </label>
                          </div>
                        </div>
                        
                        <div class="ovg-info-section">
                          <div class="ovg-info-text" id="ovg-info-10" style="display: block;">Recommended minimum</div>
                          <div class="ovg-info-text" id="ovg-info-15" style="display: none;">Extra coverage for complex cuts</div>
                          <div class="ovg-info-text" id="ovg-info-manual" style="display: none;">Custom percentage</div>
                          <div class="ovg-info-text" id="ovg-info-no" style="display: none;">Not recommended - no extra material</div>
                        </div>
                        
                        <div class="ovg-manual-section">
                          <div class="ovg-manual-input-wrapper" id="ovg-manual-input-wrapper">
                            <input type="number" id="manualInputFieldOVG" name="properties[OVERAGE_MANUAL]" value="20" step="1" min="0">
                            <span class="ovg-percent-symbol">%</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="ovg-results footer_outcome" style="margin-top: 20px; margin-bottom: 20px;">
                      <div class="ovg-results-title">Calculation Results</div>
                      <div class="ovg-result-row">
                        <span class="ovg-result-label">Overage:</span>
                        <span class="ovg-result-value" id="ovg-overage-display">0 Sq. Ft.</span>
                      </div>
                      <div class="ovg-result-row">
                        <span class="ovg-result-label">Total:</span>
                        <span class="ovg-result-value" id="ovg-total-display">0 Sq. Ft.</span>
                      </div>
                      <div class="ovg-result-row">
                        <span class="ovg-result-label">Boxes Needed:</span>
                        <span class="ovg-result-value" id="ovg-boxes-display">0</span>
                      </div>
                      <div class="ovg-result-row">
                        <span class="ovg-result-label">Total Price:</span>
                        <span class="ovg-result-value" id="ovg-price-display">$0.00</span>
                      </div>
                  </div>

                <style>
                  .inline-overage-calculator {
                    border: 1px solid #e5e7eb;
                    border-radius: 12px;
                    padding: 16px;
                    margin-bottom: 10px;
                  }
                  .calculator_wrapper {
                    display: flex;
                    gap: 10px;
                    margin-bottom: 16px;
                  }
                  .calculator_wrapper .input_boxes {
                    flex: 1;
                    text-align: center;
                    border: 1px solid #e5e7eb;
                    border-radius: 8px;
                    padding: 8px;
                  }
                  .calculator_wrapper .input_boxes input {
                    border: none;
                    text-align: center;
                    font-size: 18px;
                    font-weight: 600;
                    width: 100%;
                    padding-bottom: 4px;
                    background-color: transparent;
                  }
                   .calculator_wrapper .input_boxes input:focus {
                      outline: none;
                   }
                  .calculator_wrapper .input_boxes label {
                    font-size: 14px;
                    color: #6b7280;
                  }
                  #ovg-overage-selectors {
                      display: grid;
                      grid-template-columns: 1fr 1fr;
                      gap: 8px;
                      margin-bottom: 12px;
                  }
                  #ovg-overage-selectors label {
                      position: relative;
                      cursor: pointer;
                      margin: 0;
                  }
                  #ovg-overage-selectors input[type="radio"] {
                      position: absolute;
                      opacity: 0;
                      pointer-events: none;
                  }
                  #ovg-overage-selectors label span {
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      padding: 10px 12px;
                      border: 2px solid #e5e7eb;
                      border-radius: 12px;
                      background: #fff;
                      color: #000;
                      font-weight: 600;
                      font-size: 15px;
                      transition: all 0.2s;
                      min-height: 44px;
                  }
                  #ovg-overage-selectors input[type="radio"]:checked + span {
                      background: #0066CC !important;
                      color: #fff !important;
                      border-color: #0066CC !important;
                  }
                  #ovg-overage-selectors label:has(input[type="radio"]:checked) {
                      background: #0066CC !important;
                      color: #fff !important;
                      border-color: #0066CC !important;
                  }
                  .ovg-manual-input-wrapper {
                      display: none;
                      align-items: center;
                      gap: 8px;
                  }
                  .ovg-manual-input-wrapper.show {
                      display: flex;
                  }
                  #manualInputFieldOVG {
                      border: 2px solid #e5e7eb;
                      border-radius: 8px;
                      padding: 8px 12px;
                      width: 80px;
                      text-align: center;
                      font-size: 16px;
                      font-weight: 600;
                  }
                  .ovg-info-section {
                      text-align: left;
                      margin: 12px 0 6px 0;
                  }
                  .ovg-info-text {
                      color: #0066CC;
                      font-size: 14px;
                      min-height: 20px;
                  }
                  .ovg-results {
                      background: #f9fafb;
                      border: 1px solid #e5e7eb;
                      border-radius: 12px;
                      padding: 12px 16px;
                      margin-top: 18px;
                  }
                  .ovg-results-title {
                      font-size: 16px;
                      font-weight: 700;
                      margin-bottom: 12px;
                      text-align: center;
                  }
                  .ovg-result-row {
                      display: flex;
                      justify-content: space-between;
                      padding: 4px 0;
                      font-size: 15px;
                  }
                </style>

                <script>
                  // Auto-calculate functionality for inline overage calculator
                  document.addEventListener('DOMContentLoaded', function() {
                    if (document.querySelector('.inline-overage-calculator')) {
                      console.log('Inline overage calculator detected');
                      
                      // Auto-calculate when page loads
                      setTimeout(function() {
                        autoCalculateOverage();
                      }, 500);

                      // Auto-calculate when square footage changes
                      const sqftInput = document.getElementById('squared_size');
                      if (sqftInput) {
                        sqftInput.addEventListener('input', autoCalculateOverage);
                        sqftInput.addEventListener('change', autoCalculateOverage);
                      }

                      // Auto-calculate when boxes change
                      const boxesInput = document.getElementById('quantity_look_alike');
                      if (boxesInput) {
                        boxesInput.addEventListener('input', autoCalculateOverage);
                        boxesInput.addEventListener('change', autoCalculateOverage);
                      }

                      // Auto-calculate when overage percentage changes
                      document.querySelectorAll('#ovg-overage-selectors input[name="properties[OVERAGE]"]').forEach(radio => {
                        radio.addEventListener('change', function() {
                          const manualWrapper = document.querySelector('#ovg-manual-input-wrapper');
                          const infoTexts = document.querySelectorAll('.ovg-info-text');
                          
                          // Hide all info texts first
                          infoTexts.forEach(text => text.style.display = 'none');
                          
                          if (this.value === 'manual') {
                            manualWrapper.classList.add('show');
                            const infoManual = document.querySelector('#ovg-info-manual');
                            if (infoManual) infoManual.style.display = 'block';
                            
                            const manualField = document.querySelector('#manualInputFieldOVG');
                            if (manualField && (!manualField.value || manualField.value === '')) {
                              manualField.value = '20';
                            }
                            if (manualField) {
                              manualField.focus();
                              manualField.select();
                            }
                          } else {
                            manualWrapper.classList.remove('show');
                            if (this.value === '0.10') {
                              const info10 = document.querySelector('#ovg-info-10');
                              if (info10) info10.style.display = 'block';
                            } else if (this.value === '0.15') {
                              const info15 = document.querySelector('#ovg-info-15');
                              if (info15) info15.style.display = 'block';
                            } else if (this.value === 'no_overage') {
                              const infoNo = document.querySelector('#ovg-info-no');
                              if (infoNo) infoNo.style.display = 'block';
                            }
                          }
                          
                          // Trigger calculation
                          setTimeout(autoCalculateOverage, 100);
                        });
                      });

                      // Auto-calculate when manual overage input changes
                      const manualInput = document.getElementById('manualInputFieldOVG');
                      if (manualInput) {
                        manualInput.addEventListener('input', function() {
                          setTimeout(autoCalculateOverage, 100);
                        });
                      }
                    }
                  });
                </script>
              {% endif %}
                
                  <style>
                    .js--qty-adjuster {
                      display: none;
                    }
                  </style>

<script defer="defer">
  $(document).ready(function() {
    console.log("Document ready, calculator script loaded.");
                        
    var output_boxes = 0;
    var overageSet = false;

    // Function to update property fields
    function updatePropertyFields(quantity, sqft, pieces) {
      // Only update if the elements exist
      if (document.querySelector('#property-qty')) {
        document.querySelector('#property-qty').value = quantity;
      }
      
      if (document.querySelector('#property-sqft')) {
        document.querySelector('#property-sqft').value = sqft;
      }
      
      if (document.querySelector('#property-pieces')) {
        document.querySelector('#property-pieces').value = pieces;
      }
    }

    // Calculator popup
    $(".calc_pop_up").click(function(event) {
      var container = $("#tile-calculator");
      if (!container.is(event.target) && !container.has(event.target).length) {
        console.log("Closing calc pop-up.");
        $(".calc_pop_up").removeClass("calc_pop_up-open");
        $(this).parents('html').removeClass('overflow-pop-hidden');
      }
    });
    
    $(".productInfo-popup-close").click(function(event) {
      $(".calc_pop_up").removeClass("calc_pop_up-open");
        $(this).parents('html').removeClass('overflow-pop-hidden');
    });
    
    $(".open_calc_pop_up").click(function(){
      $(this).parents('html').addClass('overflow-pop-hidden');
      $(".calc_pop_up").addClass("calc_pop_up-open");
      console.log("Added calc_pop_up-open class.");
    });

    $("#calculator-footage").focus(function() {
      console.log("Calculator footage input focused.");
      $("#calculator-footage-section").removeClass("opacity_low");
      $("#calculator-dimensions-section").addClass("opacity_low");
    });

    $(".validate-number").focus(function() {
      console.log("Validate number input focused.");
      $("#calculator-footage-section").addClass("opacity_low");
      $("#calculator-dimensions-section").removeClass("opacity_low");
    });

    $("#calculate_top").click(function() {
      console.log("Calculate top button clicked.");
      $("#calculator-footage-section").removeClass("opacity_low");
      $("#calculator-dimensions-section").addClass("opacity_low");
      calculateTop();
    });

    $("#calculate_bottom").click(function() {
      console.log("Calculate bottom button clicked.");
      $("#calculator-footage-section").addClass("opacity_low");
      $("#calculator-dimensions-section").removeClass("opacity_low");
      calculateBottom();
    });

    $("#ovg-calculate").click(function() {
      console.log("Calculate overage.");
      calculateOverage();
    });
    
    // Auto-calculation function for overage
    function autoCalculateOverage() {
      const isOverageV3 = "{{ product.tags | where: 'overage-v3' }}".length > 0;
      if (!isOverageV3) return;

      const footageInput = $('#squared_size');
      if (footageInput.length && footageInput.val() && parseFloat(footageInput.val()) > 0) {
        console.log("Auto-calculating overage from inline calculator...");
        calculateOverage();
        showOverageResults();
      }
    }
    
    // Auto-calculate when overage percentage is selected
    $(document).on('change', '#ovg-overage input[name="properties[OVERAGE]"]', function() {
      console.log('Overage selection changed to:', this.value);
      autoCalculateOverage();
    });
    
    // Auto-calculate when manual input changes
    $(document).on('input change', '#manualInputFieldOVG', function() {
      console.log('Manual input changed to:', $(this).val());
      autoCalculateOverage();
    });
    
    // Auto-calculate when square footage input changes
    var footageInputTimer;
    $(document).on('input', '#squared_size', function() {
      clearTimeout(footageInputTimer);
      footageInputTimer = setTimeout(function() {
        calculateFromSquaredSize();
      }, 500);
    });

    $(document).on('input', '#quantity_look_alike', function() {
        clearTimeout(footageInputTimer);
        footageInputTimer = setTimeout(function() {
            calculateFromQuantity();
        }, 500);
    });
    
    $("#squared_size").change(function() {
      console.log("Squared size input changed.");
      calculateFromSquaredSize();
    });

    $("#quantity_look_alike").change(function() {
      console.log("Quantity look-alike input changed.");
      calculateFromQuantity();
      
      // Update property fields when quantity changes
      var quantity = Number($(this).val() || 0);
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      
      updatePropertyFields(quantity, (quantity * box_dimensions).toFixed(2), quantity * tiles_per_box);
    });

    $('#addToquanitity').click(function() {
        if (output_boxes > 0) {
            {% if product.variants.first.inventory_management == 'shopify' %}
              if (output_boxes > {{ max_qty }}) {
                  alert("Only {{ max_qty }} available");
                  return;
              }
            {% endif %}
            $('.calc_pop_up').removeClass('calc_pop_up-open'); 
            $(this).parents('html').removeClass('overflow-pop-hidden');
            $('#x-atc-button-{{ section.id }}').click();
        }
    });

    $('#ovg-addToquanitity').click(function() {
        if (output_boxes > 0) {
            {% if product.variants.first.inventory_management == 'shopify' %}
              if (output_boxes > {{ max_qty }}) {
                  alert("Only {{ max_qty }} available");
                  return;
              }
            {% endif %}
            // $('#ovg-popup').removeClass('ovg-popup-open'); // Commented out - using inline calculator now
            // $(this).parents('html').removeClass('overflow-pop-hidden'); // Commented out - using inline calculator now
            $('#x-atc-button-{{ section.id }}').click();
        }
    }); 

    function up(v, n) {
      return Math.ceil((v * Math.pow(10, n)) / Math.pow(10, n));
    }

    function roundUp(num, decimalPlaces) {
      const factor = Math.pow(10, decimalPlaces);
      return Math.ceil(num * factor) / factor;
    }

    function calculateTop(){
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      
      var calculator_footage = Number($('#calculator-footage').val() || 0);
      
      // Get overage percentage
      var selectedOverage = $('#overage_top input[name="properties[TOP-OVERAGE]"]:checked').val();
      var manualOverage = $('#overage_top #manualInputField').val();
      var overage = 0;
      
      if (selectedOverage === 'manual') {
        overage = manualOverage ? parseFloat(manualOverage) / 100 : 0;
      } else if (selectedOverage === 'no_overage') {
        overage = 0;
      } else {
        overage = parseFloat(selectedOverage);
      }
      
      // Calculate solution with overage
      var solution = calculator_footage * (1 + overage);
      var solution_rounded = parseFloat(solution.toFixed(2));
      
      // Calculate boxes needed
      var box_output = solution / box_dimensions;
      var amount_of_boxes = box_output;
      
      output_boxes = up(amount_of_boxes, 0);

      {% if product.variants.first.inventory_management == 'shopify' %}
        if (output_boxes > {{ max_qty }}) {
          alert('Only {{ max_qty }} available');
          output_boxes = {{ max_qty }};
        }
      {% endif %}

      // Calculate total cost
      var product_price = {{ product.price | divided_by: 100.00 }};
      var total_cost_avg = product_price * output_boxes;
      var rounded_total_avg = roundUp(total_cost_avg, 2);
      
      // Calculate actual coverage based on boxes
      var total_coverage = output_boxes * box_dimensions;
      var total_coverage_rounded = parseFloat(total_coverage.toFixed(2));
      
      // Update outputs
      $('#boxes').val(output_boxes);
      $('#solution').val(solution_rounded);
      $('#total_cost').val('$' + rounded_total_avg.toFixed(2));
      $('#boxes_needed').text(output_boxes);
      $('#total_coverage').val(total_coverage_rounded);
      $('#total_square').text(total_coverage_rounded);
      $('#squared_size').val(total_coverage_rounded);
      $('[name="quantity"]').attr('value', output_boxes).val(output_boxes);
      $('#quantity_look_alike').val(output_boxes);
      $('#product_page_total').text('$' + rounded_total_avg.toFixed(2));

      const overagePercentage = Math.round(overage * 100) + '%';

      const propertyOverage = document.querySelector('#property-overage');
      if(propertyOverage) {
        propertyOverage.value = overagePercentage;
      }
      
      // Update property fields
      updatePropertyFields(output_boxes, total_coverage_rounded, output_boxes * tiles_per_box);
    }

    function calculateBottom(){
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      var calculator_length_ft = Number($('#calculator-length-ft').val() || 0);
      var calculator_length_in = Number($('#calculator-length-in').val() || 0);
      var calculator_width_ft = Number($('#calculator_width_ft').val() || 0);
      var calculator_width_in = Number($('#calculator_width_in').val() || 0);
      var length_in_inches = (calculator_length_ft * 12) + calculator_length_in;
      var width_in_inches = (calculator_width_ft * 12) + calculator_width_in;
      var footage_in_inches = length_in_inches * width_in_inches;
      var footage_in_feet = footage_in_inches / 144;
      var footage_in_feet_rounded = parseFloat(footage_in_feet.toFixed(2));
      
      // Get overage percentage
      var selectedOverage = $('#overage_bottom input[name="properties[BTM-OVERAGE]"]:checked').val();
      var manualOverage = $('#overage_bottom #manualInputFieldBottom').val();
      var overage = 0;
      
      if (selectedOverage === 'manual') {
        overage = manualOverage ? parseFloat(manualOverage) / 100 : 0;
      } else if (selectedOverage === 'no_overage') {
        overage = 0;
      } else {
        overage = parseFloat(selectedOverage);
      }
      
      // Calculate solution with overage
      var solution = footage_in_feet * (1 + overage);
      var solution_rounded = parseFloat(solution.toFixed(2));
      
      // Calculate boxes needed
      var box_output = solution / box_dimensions;
      var amount_of_boxes = box_output;
      output_boxes = up(amount_of_boxes, 0);

      {% if product.variants.first.inventory_management == 'shopify' %}
        if (output_boxes > {{ max_qty }}) {
          alert('Only {{ max_qty }} available');
          output_boxes = {{ max_qty }};
        }
      {% endif %}

      // Calculate total cost
      var product_price = {{ product.price | divided_by: 100.00 }};
      var total_cost_avg = product_price * output_boxes;
      var rounded_total_avg = roundUp(total_cost_avg, 2);
      
      // Calculate actual coverage based on boxes
      var total_coverage = output_boxes * box_dimensions;
      var total_coverage_rounded = parseFloat(total_coverage.toFixed(2));
      
      // Update outputs
      $('#boxes').val(output_boxes);
      $('#solution').val(solution_rounded);
      $('#total_cost').val('$' + rounded_total_avg.toFixed(2));
      $('#boxes_needed').text(output_boxes);
      $('#total_coverage').val(total_coverage_rounded);
      $('#total_square').text(total_coverage_rounded);
      $('#squared_size').val(solution_rounded);
      $('[name="quantity"]').attr('value', output_boxes).val(output_boxes);
      $('#quantity_look_alike').val(output_boxes);
      $('#calculator-footage').val(footage_in_feet_rounded);
      $('#product_page_total').text('$' + rounded_total_avg.toFixed(2));

      const overagePercentage = Math.round(overage * 100) + '%';
      const propertyOverage = document.querySelector('#property-overage');
      if (propertyOverage) {
        propertyOverage.value = overagePercentage;
      }
      
      // Update property fields
      updatePropertyFields(output_boxes, total_coverage_rounded, output_boxes * tiles_per_box);
    }

    function calculateOverage(){
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      var calculator_footage = Number($('#squared_size').val() || 0);
      
      // Get overage percentage
      var selectedOverage = $('#ovg-overage-selectors input[name="properties[OVERAGE]"]:checked').val();
      var manualOverage = $('#manualInputFieldOVG').val();
      var overage = 0;
      
      console.log('Selected overage:', selectedOverage);
      console.log('Manual overage input:', manualOverage);
      console.log('Calculator footage:', calculator_footage);
      
      if (selectedOverage === 'manual') {
        // Make sure we're parsing the manual input correctly
        overage = manualOverage ? parseFloat(manualOverage) / 100 : 0;
        console.log('Parsed manual overage (after division):', overage);
      } else if (selectedOverage === 'no_overage') {
        overage = 0;
      } else {
        overage = parseFloat(selectedOverage);
      }
      
      // Calculate overage amount
      var overage_amount = calculator_footage * overage;
      var overage_amount_rounded = parseFloat(overage_amount.toFixed(2));
      
      // Calculate solution with overage
      var solution = calculator_footage * (1 + overage);
      var solution_rounded = parseFloat(solution.toFixed(2));
      
      // Calculate boxes needed - use Math.round instead of up() for overage calculations
      var box_output = solution / box_dimensions;
      var amount_of_boxes = box_output;
      output_boxes = Math.round(amount_of_boxes);

      {% if product.variants.first.inventory_management == 'shopify' %}
        if (output_boxes > {{ max_qty }}) {
          alert('Only {{ max_qty }} available');
          output_boxes = {{ max_qty }};
        }
      {% endif %}

      const overagePercentage = Math.round(overage * 100) + '%';
      console.log('Formatted overage:', overagePercentage);
      const propertyOverage = document.querySelector('#property-overage');
      if (propertyOverage) {
        propertyOverage.value = overagePercentage;
        console.log('Updated #property-overage to:', overagePercentage);
      } else {
        console.error('#property-overage element not found');
      }
      
      // Calculate total cost
      var product_price = {{ product.price | divided_by: 100.00 }};
      var total_cost_avg = product_price * output_boxes;
      var rounded_total_avg = roundUp(total_cost_avg, 2);
      
      // Calculate actual coverage based on boxes
      var total_coverage = output_boxes * box_dimensions;
      var total_coverage_rounded = parseFloat(total_coverage.toFixed(2));
      
      // Update original hidden outputs (for functionality)
      $('#ovg-boxes').val(output_boxes);
      $('#ovg-solution').val(overage_amount_rounded);
      $('#ovg-total_cost').val('$' + rounded_total_avg.toFixed(2));
      $('#ovg-boxes_needed').text(output_boxes);
      $('#ovg-total_coverage').val(solution_rounded);
      $('#ovg-total_square').text(solution_rounded);
      $('[name="quantity"]').attr('value', output_boxes).val(output_boxes);
      $('#quantity_look_alike').val(output_boxes);
      
      // Update custom display elements
      $('#ovg-overage-display').text(overage_amount_rounded.toFixed(2) + ' Sq. Ft.');
      $('#ovg-total-display').text(solution_rounded.toFixed(2) + ' Sq. Ft.');
      $('#ovg-boxes-display').text(output_boxes);
      $('#ovg-price-display').text('$' + rounded_total_avg.toFixed(2));
      
      console.log('Updated custom display:', {
        overage: overage_amount_rounded,
        total: solution_rounded,
        boxes: output_boxes,
        price: '$' + rounded_total_avg.toFixed(2)
      });
      
      // Update property fields
      updatePropertyFields(output_boxes, total_coverage_rounded, output_boxes * tiles_per_box);
      
      // Set overage flag
      overageSet = true;
    }

    function calculateFromSquaredSize(){
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      var squared_size = Number($('#squared_size').val() || 0);
      var box_output = squared_size / box_dimensions;
      var amount_of_boxes = box_output;
      output_boxes = up(amount_of_boxes, 0);

      {% if product.variants.first.inventory_management == 'shopify' %}
        if (output_boxes > {{ max_qty }}) {
          alert('Only {{ max_qty }} available');
          output_boxes = {{ max_qty }};
        }
      {% endif %}

      var total_coverage = output_boxes * box_dimensions;
      var total_coverage_rounded = parseFloat(total_coverage.toFixed(2));
      
      var product_price = {{ product.price | divided_by: 100.00 }};
      var total_cost_avg = product_price * output_boxes;
      var rounded_total_avg = roundUp(total_cost_avg, 2);
      
      $('#boxes').val(output_boxes);
      $('#solution').val(total_coverage_rounded);
      $('#squared_size').val(total_coverage_rounded);
      $('#total_cost').val('$' + rounded_total_avg);
      $('#boxes_needed').text(output_boxes);
      $('[name="quantity"]').attr('value',output_boxes).val(output_boxes);
      $('#quantity_look_alike').val(output_boxes);
      $('#product_page_total').text('$' + rounded_total_avg);
      $('#calculator-footage').val(total_coverage_rounded);
      // Update property fields
      updatePropertyFields(output_boxes, total_coverage_rounded, output_boxes * tiles_per_box);

      if ($('.inline-overage-calculator').length) {
        autoCalculateOverage();
      }
    }

    function calculateFromQuantity(){
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      var quantity_look_alike = Number($('#quantity_look_alike').val() || 0);

      if (quantity_look_alike > {{ max_qty }}) {
        alert('Only {{ max_qty }} available');
        quantity_look_alike = {{ max_qty }};
        document.getElementById('quantity_look_alike').value = quantity_look_alike; 
      }
      
      
      var q_calc = quantity_look_alike * box_dimensions;
      var q_calc_rounded = parseFloat(q_calc.toFixed(2));
      var product_price = {{ product.price | divided_by: 100.00 }};
      var total_price = product_price * quantity_look_alike;
      var rounded_total = up(total_price, 2);

      $('#product_page_total').text('$' + rounded_total);
      $('#squared_size').val(q_calc_rounded);
      $('#calculator-footage').val(q_calc_rounded);
      
      $('[name="quantity"]').attr('value',quantity_look_alike).val(quantity_look_alike);
      
      // Update property fields
      updatePropertyFields(quantity_look_alike, q_calc_rounded, quantity_look_alike * tiles_per_box);
      
      if ($('.inline-overage-calculator').length) {
        autoCalculateOverage();
      }
    }

    function updateCalculatorOutputs(boxes, solution, totalCost) {
      overageSet = true;
      $('#boxes').val(boxes);
      $('#solution').val(solution);
      $('#total_square').text(solution);
      $('#total_cost').val('$' + totalCost.toFixed(2));
      $('#boxes_needed').text(boxes);
      $('[name="quantity"]').attr('value',boxes).val(boxes);
      $('#quantity_look_alike').val(boxes);
      $('#product_page_total').text('$' + totalCost);
      
      // Calculate actual coverage based on boxes
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      var total_coverage = boxes * box_dimensions;
      var total_coverage_rounded = parseFloat(total_coverage.toFixed(2));
      
      // Update total coverage
      $('#total_coverage').val(total_coverage_rounded);
      
      // Update property fields
      updatePropertyFields(boxes, total_coverage_rounded, boxes * {{tiles_per_box}});
    }

    function updateOVGCalculatorOutputs(boxes, solution, totalCost) {
      overageSet = true;
      $('#ovg-boxes').val(boxes);
      $('#ovg-solution').val(solution);
      $('#ovg-total_square').text(solution);
      $('#ovg-total_cost').val('$' + totalCost.toFixed(2));
      $('#ovg-boxes_needed').text(boxes);
      $('[name="quantity"]').attr('value',boxes).val(boxes);
      $('#quantity_look_alike').val(boxes);
      $('#product_page_total').text('$' + totalCost);
      
      // Calculate actual coverage based on boxes
      var tile_size = {{tile_size}};
      var tiles_per_box = {{tiles_per_box}};
      var box_dimensions = {{ box_area_clean }};
      var total_coverage = boxes * box_dimensions;
      var total_coverage_rounded = parseFloat(total_coverage.toFixed(2));
      
      // Update total coverage
      $('#ovg-total_coverage').val(total_coverage_rounded);
      
      // Update property fields
      updatePropertyFields(boxes, total_coverage_rounded, boxes * {{tiles_per_box}});
    }

    function updateTotalCoverage(box_dimensions) {
      setTimeout(function() {
        var quantity_boxes = Number($('#boxes').val() || 0);
        var q_calc = quantity_boxes * box_dimensions;
        var q_calc_rounded = parseFloat(q_calc.toFixed(2));
        $('#total_coverage').val(q_calc_rounded);
        $('#total_square').text(q_calc_rounded);
        $('#squared_size').val(q_calc_rounded);
        
        // Update property fields
        updatePropertyFields(quantity_boxes, q_calc_rounded, quantity_boxes * {{tiles_per_box}});
      }, 200);
    }

    function OVGupdateTotalCoverage(box_dimensions) {
      setTimeout(function() {
        var quantity_boxes = Number($('#ovg-boxes').val() || 0);
        var q_calc = quantity_boxes * box_dimensions;
        var q_calc_rounded = parseFloat(q_calc.toFixed(2));
        $('#ovg-total_coverage').val(q_calc_rounded);
        $('#ovg-total_square').text(q_calc_rounded);
        $('#squared_size').val(q_calc_rounded);
        
        // Update property fields
        updatePropertyFields(quantity_boxes, q_calc_rounded, quantity_boxes * {{tiles_per_box}});
      }, 200);
    }
  });

  // Function to update custom results display
  function updateCustomResults() {
    // Wait a bit for the original calculation to complete
    setTimeout(function() {
      // Get values from hidden original results
      const overageValue = $('#ovg-solution').val() || '0';
      const totalValue = $('#ovg-total_coverage').val() || '0';
      const boxesValue = $('#ovg-boxes').val() || '0';
      const priceValue = $('#ovg-total_cost').val() || '$0.00';
      
      // Update custom display elements
      $('#ovg-overage-display').text(overageValue + ' Sq. Ft.');
      $('#ovg-total-display').text(totalValue + ' Sq. Ft.');
      $('#ovg-boxes-display').text(boxesValue);
      $('#ovg-price-display').text(priceValue);
      
      console.log('Updated custom results:', {
        overage: overageValue,
        total: totalValue,
        boxes: boxesValue,
        price: priceValue
      });
    }, 100);
  }

  // Hook into the calculateOverage function
  const originalCalculateOverage = window.calculateOverage;
  window.calculateOverage = function() {
    if (originalCalculateOverage) {
      originalCalculateOverage.apply(this, arguments);
      updateCustomResults();
    }
  };

  // Also update when any of the original result fields change
  $(document).on('change input', '#ovg-solution, #ovg-total_coverage, #ovg-boxes, #ovg-total_cost', function() {
    updateCustomResults();
  });
</script>